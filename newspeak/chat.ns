class Chat usingPlatform: platform = Value (
| private utils       = (platform system loadModule: 'util.ns' nextTo: self) usingPlatform: platform.
  private actors      = platform actors.
  private system      = platform system.
  private TransferArray = platform kernel TransferArray.
  private TransferObject = platform kernel TransferObject.
  private Array       = platform kernel Array.
  (* private Dictionary  = platform collections Dictionary. *)
  private Value       = platform kernel Value.
  private Vector      = platform kernel Vector.
  (* private IdentitySet = platform collections IdentitySet. *)

  private DiceRoll    = utils DiceRoll.
  private SimpleRand  = utils SimpleRand.

  private BenchNoBufferedChats = false.
|
)(
  class BehaviorFactory new: compute post: post leave: leave invite: invite = Value (
  | private compute = compute.
    private post    = self compute + post.
    private leave   = self post + leave.
    private invite  = self leave + invite.
  |)(
    public determineAction: dice = (
      | pick = dice next. |
      pick < compute
        ifTrue: [ ^ #compute ].
      pick < post
        ifTrue: [ ^ #post ].
      pick < leave
        ifTrue: [ ^ #leave ].
      pick < invite
        ifTrue: [ ^ #invite ].
      ^ #none
    )
  )

  class Chat new: initiator = (
  | members <Vector[FarReference[Client]]> = Vector new.
    buffer  <Vector[Nil]>                  = Vector new.
  |
    members append: initiator.
  )(
    public post: payload <Array | nil> accu: accumulator clientId: cId = (
      BenchNoBufferedChats
        ifFalse: [
          debug: 'Chat.post buffered'.
          buffer append: payload ].

      members isEmpty
        ifTrue: [
          debug: 'Chat.post empty stop'.
          accumulator <-: stop: #post clientId: cId ]
        ifFalse: [
          debug: ['Chat.post forward to ' + members size].
          accumulator <-: bump: members size act: #post clientId: cId.
          members do: [:m |
            m <-: forward: self payload: payload accu: accumulator clientId: cId ] ]
    )

    public join: client <FarReference[Client]> accu: accumulator clientId: cId = (
      debug: ['Chat.join: ' + client].
      members append: client.
      debug: ['\tChat.join: ' + client + ' member size: ' + members size].

      BenchNoBufferedChats ifFalse: [
        buffer size > 0 ifTrue: [
          debug: ['Chat.join send bump for ' + buffer size].
          accumulator <-: bump: buffer size act: #ignore clientId: cId.
          buffer do: [:m |
            client <-: forward: self payload: m accu: accumulator clientId: cId ] ] ].

      client <-: accept: self accu: accumulator clientId: cId.
    )

    public leave: client <FarReference[Client]> didLogout: didLogout accu: accumulator clientId: cId = (
      | removed |
      removed:: members remove: client.
      debug: ['Chat.leave: ' + client + ' members size: ' + members size + ' removed: ' + removed].

      client <-: left: self didLogout: didLogout accu: accumulator clientId: cId
    )
  )

  class Client create: id dir: directory seed: seed = (
  | private id = id.
    private friends <Vector[FarReference[Client]]> = Vector new.
    private chats   <Vector[FarReference[Chat]]>   = Vector new.
    private created <Vector[FarReference[Chat]]>   = Vector new.
    private directory = directory.
    private rand = SimpleRand new: seed.
    private dice = DiceRoll new: rand.
  |)(
    public befriend: client <FarReference[Client]> = (
      debug: ['Client.befriend id: ' + id ].
      friends append: client
    )

    public logout = (
      chats isEmpty
        ifTrue: [
          (* TODO: should I avoid using IDs, is this allowed? *)
          debug: ['Client.logout: ' + id + ' dir<-:left'].
          directory <-: left: id.
          ^ self ].

      debug: ['Client.logout. <-: LEAVE: ' + id].
      chats do: [:c |
        c <-: leave: self didLogout: true accu: nil clientId: id ]
    )

    public left: chat <FarReference[Chat]> didLogout: didLogout accu: accumulator clientId: cId = (
      chats remove: chat.
      created remove: chat.

      (chats isEmpty and: [ didLogout ])
        ifTrue: [
          debug: ['Client.left: ' + id + ' dir<-left'].
          directory <-: left: id ]
        ifFalse: [
          accumulator == nil
            ifTrue: [ debug: ['Client.left: ' + id + ' accu==nil'] ]
            ifFalse: [
            debug: ['Client.left: ' + id + ' accc<-stop leave'].
            accumulator <-: stop: #leave clientId: cId ] ]
    )

    public accept: chat <FarReference[Chat]> accu: accumulator clientId: cId = (
      chats append: chat.
      accumulator <-: stop: #ignore clientId: cId
    )

    public forward: chat <FarReference[Chat]> payload: payload <Array | nil> accu: accumulator clientId: cId = (
      accumulator <-: stop: #postDelivery clientId: cId
    )

    private fibonacci: n = (
      | j fibJ fibI |
      n = 0 ifTrue: [ ^ 0 ].
      n = 1 ifTrue: [ ^ 1 ].
      j:: n / 2.
      fibJ:: fibonacci: j.
      fibI:: fibonacci: j - 1.
      n % 2 = 0 ifTrue: [ ^ fibJ * (fibJ * (fibI * 2)) ].
      n % 4 = 1
        ifTrue:  [ ^ ((fibJ * 2) + fibI) * ((fibJ * 2) - fibI) + 2 ]
        ifFalse: [ ^ ((fibJ * 2) + fibI) * ((fibJ * 2) - fibI) - 2 ]
    )

    public act: behavior accu: accumulator = (
      | b index |
      index:: (rand nextInt: created size) + 1.
      b:: behavior determineAction: dice.
      debug: ['Client.act: ' + id + ' #chats: ' + chats size + ' action: ' + b].

      b = #post ifTrue: [
        | chatsSize = created size. |
        chatsSize = 0 ifTrue: [
          debug: ['\tClient.act: ' + id + ' no post'].
          accumulator <-: stop: #none clientId: id.
          ^ self ].
        debug: ['\tClient.act: ' + id + ' do actual post'].
        (created at: index) <-: post: nil accu: accumulator clientId: id.
        ^ self ].

      b = #leave ifTrue: [
        | chatsSize = created size. |
        chatsSize < 2 ifTrue: [
          debug: ['\tClient.act: ' + id + ' no leave'].
          accumulator <-: stop: #none clientId: id.
          ^ self ].

        debug: ['\tClient.act: ' + id + ' do actual leave'].
        (created at: index) <-: leave: self didLogout: false accu: accumulator clientId: id.
        ^ self ].

      b = #compute ifTrue: [
        (* TODO: make sure this is not optimized out *)
        fibonacci: 35.
        accumulator <-: stop: #compute clientId: id.
        ^ self ].

      b = #invite ifTrue: [
        | createdP <Promise[Chat]> = (actors createActorFromValue: Chat) <-: new: self.
          f i invitations createdChatAppendedP |
        f:: friends asArray.

        rand shuffle: f.

        debug: [
          (f size = friends size) ifTrue: [''] ifFalse: ['f ~= friends'] ].

        invitations:: friends size > 0
          ifTrue: [ rand next % friends size ]
          ifFalse: [
            self error: 'Error: this should never happen. friends size == 0??'.
            1 ].

        invitations = 0 ifTrue: [
          invitations:: 1 ].

        accumulator <-: bump: invitations act: #invite clientId: id.

        debug: ['\tClient.act: ' + id + ' chat created for: ' + invitations].

        createdChatAppendedP:: createdP whenResolved: [:createdChat |
          debug: ['\tClient.act: ' + id + ' chat created'].
          chats append: createdChat.
          created append: createdChat.
          self ].

        1 to: invitations do: [:i |
          | k = f at: i. |
          debug: ['\tClient.act: ' + id + ' whenResolved: (i: ' + i + ' f size: ' + f size + ')'].
          k whenResolved: [:clientFarRef |
            debug: ['\tClient.act: ' + id + ' send join'].
            createdP <-: join: clientFarRef accu: accumulator clientId: id ] ].

        ^ createdChatAppendedP ].

      (* else *)
      accumulator <-: stop: #none clientId: id
    )
  )

  class Directory new: seed with: befriend id: id = (
  | private clients <Vector[Array[Integer,Promise[Client]]]> = Vector new.
    private numClients ::= 0.
    private dId = id.
    private random = SimpleRand new: seed.
    private numBefriends = befriend.
    private completions ::= 0.
    public poker ::= nil.
  |)(
    public login: id = (
      | newClient = (actors createActorFromValue: Client) <-: create: id dir: self seed: random next. |
      debug: ['Dir.login(' + dId + '): id=' + id + ' nc: ' + newClient].
      clients append: {id. newClient}.
      numClients:: numClients + 1.
    )

    public befriend = (
      debug: ['Dir.befriend(' + dId + ') numClients: ' + numClients ].
      clients do: [:friendTuple |
        friendTuple ~= nil ifTrue: [
          | friend fId madeFriends |
          friend:: friendTuple at: 2.
          fId:: friendTuple at: 1.
          madeFriends:: false.

          [madeFriends] whileFalse: [
            clients do: [:clientTuple |
              clientTuple ~= nil ifTrue: [
                | client cId |
                client:: clientTuple at: 2.
                cId:: clientTuple at: 1.
                ((random nextInt: 100) < numBefriends and: [fId <> cId])
                  ifTrue: [
                    madeFriends:: true.
                    client <-: befriend: friend.
                    friend <-: befriend: client ] ] ] ] ] ]
    )

    private remove: clientId <Integer> = (
      clients doIndexes: [:i |
        | tuple = clients at: i. |
        tuple ~= nil ifTrue: [
          (tuple at: 1) = clientId ifTrue: [
            numClients:: numClients - 1.
            clients at: i put: nil ] ] ]
    )

    public left: clientId <Integer> = (
      debug: ['Dir.left(' + dId + ') clients size: ' + clients size + ' ' + clientId].


(* OK, so this goes all wrong because we switch far refs for promises,
to get some completion ordering semantis for the act.
Solution options:
 - go back to id+promise pair
 - unwrap the promises for deletion *)

      remove: clientId.

      numClients = 0 ifTrue: [
        clients removeAll.
        poker == nil
          ifTrue: [ debug: ['Dir.left(' + dId + '): clientId=' + clientId + ' poker==nil'] ]
          ifFalse: [
            debug: ['Dir.left(' + dId + '): clientId=' + clientId + ' poker<-finished'].
            poker <-: finished ]
      ]
    )

    public poke: factory accu: accumulator = (
      debug: ['Dir.poke(' + dId + ') clients size: ' + clients size].

      clients do: [:tuple |
        tuple ~= nil ifTrue: [
          debug: ['\tDir.poke(' + dId + ') act to ' + (tuple at: 1) + ' ' + (tuple at: 2) asString].
          tuple at: 2 put: ((tuple at: 2) <-: act: factory accu: accumulator) ] ]
    )

    public disconnect: p = (
      debug: ['Dir.disconnect(' + dId + ')'].
      poker:: p.

      clients do: [:tuple |
        tuple ~= nil ifTrue: [
          (tuple at: 2) <-: logout ] ]
    )
  )

  class Accumulator new: p expected: anInt turns: i = (
  | private turn = i.
    private actions = TransferArray new: 7 withAll: 0.
    private poker = p.
    private start = system ticks. (* Microseconds *)
    private end ::= 0.
    private duration ::= 0.
    private expected ::= anInt.
    private didStop ::= false.
  |)(
    public bump: anInt act: action clientId: clientId = (
      recordAction: action.
      expected:: expected + anInt - 1.
      debug: ['Acc.bump(t:' + turn + ' c:' + clientId + '). Exp: ' + expected + '\tact: ' + action]
    )

    private recordAction: action = (
      action = #post         ifTrue: [ actions at: 1 put: 1 + (actions at: 1). ^ self ].
      action = #postDelivery ifTrue: [ actions at: 2 put: 1 + (actions at: 2). ^ self ].
      action = #leave        ifTrue: [ actions at: 3 put: 1 + (actions at: 3). ^ self ].
      action = #invite       ifTrue: [ actions at: 4 put: 1 + (actions at: 4). ^ self ].
      action = #compute      ifTrue: [ actions at: 5 put: 1 + (actions at: 5). ^ self ].
      action = #ignore       ifTrue: [ actions at: 6 put: 1 + (actions at: 6). ^ self ].

      actions at: 7 put: 1 + (actions at: 7)
    )

    public stop: action clientId: clientId = (
      recordAction: action.

      expected:: expected - 1.

      debug: ['Acc.stop(t:' + turn + ' c:' + clientId + '). Exp: ' + expected + '\tact: ' + action].
      expected = 0 ifTrue: [
        end:: system ticks.
        duration:: end - start.
        didStop:: true.

        (* TODO replace *)
        (* poker <-: confirm: turn duration: duration *)
        poker <-: confirm ]
    )

    (* TODO delete *)
    public print: poker i: i j: j = (
      poker <-: collect: i j: j duration: duration actions: actions
    )
  )

  class Poker clients: clients turns: numTurns directories: dirs befriend: befriend factory: factory = (
  | private actions = Array new: 7 withAll: 0.
    private clients = clients.
    private logouts ::= 0.
    private confirmations ::= 0.
    private turns ::= numTurns.
    private iteration ::= 1.
    private rand = SimpleRand new: 42.

    private dId ::= -1.
    private directories <Promise[Directory]> = Array new: dirs withAll: [ dId:: dId + 1.
      (actors createActorFromValue: Directory) <-: new: rand next with: befriend id: dId ].
    private runtimes ::= Vector new.
    private accumulations ::= 0.
    private finals = Vector new.
    private factory = factory.
    private bench ::= nil.
    private last ::= false.
    private turnSeries = Vector new.
    (*  TODO replace
    private turnSeries = Array new: numTurns. *)
  |)(
    public start: aBench isLast: isLast = (
      debug: ['Poker.start. dirSize: ' + directories size].
      confirmations:: turns.
      logouts:: directories size.
      bench:: aBench.
      last:: isLast.
      accumulations:: 0.

      finals append: (Array new: turns withAll: 0.0).

      0 to: clients - 1 do: [:clientId |
        | index |
        index:: (clientId % directories size) + 1.

        debug: ['Poker.start login cId: ' + clientId + ' clients: ' + clients].
        (* Sequentialize all login operations on completion *)
        directories at: index put: ((directories at: index) <-: login: clientId) ].

      debug: 'Poker.start after logins'.

      directories doIndexes: [:index |
        debug: 'Poker.start befriend'.
        (* Sequentialize all befriend operations on completion *)
        directories at: index put: ((directories at: index) <-: befriend) ].

      1 to: turns do: [:i |
        | accumulator = (actors createActorFromValue: Accumulator) <-: new: self expected: clients turns: i. |
        directories do: [:d |
          (* poke operations require completion of login and befriend,
             but otherwise, don't wait for completion *)
          d <-: poke: factory accu: accumulator ].

        runtimes append: accumulator ].
    )

    (* TODO replace
    public confirm: turn duration: duration = (
      (turnSeries at: turn) == nil
        ifTrue: [ ('Error turn ' + turn + ' already has value:' + duration) println ].
      turnSeries at: turn put: duration.*)

    public confirm = (
      confirmations:: confirmations - 1.
      debug: ['Poker.confirm. confirmations: ' + confirmations].
      confirmations = 0 ifTrue: [
        directories do: [:d |
          d <-: disconnect: self ] ]
    )

    public finished = (
      logouts:: logouts - 1.
      debug: ['Poker.finished: remaining logouts=' + logouts].
      logouts = 0 ifTrue: [
        | turn ::= 1. |
        runtimes do: [:accumulator |
          accumulations:: accumulations + 1.
          accumulator <-: print: self i: iteration j: turn.
          turn:: turn + 1 ].

        runtimes:: Vector new ]
    )

    public collect: i j: j duration: duration actions: actionArr <TransferArray> = (
      1 to: 5 do: [:i |
        actions at: i put: (actions at: i) + (actionArr at: i) ].


      (finals at: i) at: j put: duration.
      turnSeries append: duration.

      accumulations:: accumulations - 1.
      accumulations = 0 ifTrue: [
        iteration:: iteration + 1.

        bench <-: complete.

        (* last ifTrue: [
          finals doIndexes: [:i |
            | turns |
            turns:: finals at: i.
            ].
           ] *)

      '\n\n' println.
       ('#post:    ' + (actions at: 1)) println.
       ('#postDel: ' + (actions at: 2)) println.
       ('#leave:   ' + (actions at: 3)) println.
       ('#invite:  ' + (actions at: 4)) println.
       ('#compute: ' + (actions at: 5)) println.
       ('#ignore:  ' + (actions at: 6)) println.
       ('#none:    ' + (actions at: 7)) println. ]
    )
  )

  public class Config new: args = TransferObject (
  | private args = args.
    public clients  ::= 1024.
    public numDirs  ::= 8.
    public turns    ::= 32.
    public compute  ::= 55.
    public post     ::= 25.
    public leave    ::= 10.
    public invite   ::= 10.
    public befriend ::= 10.

    public parseable ::= false.
  |
    readConfig
  )(
    private readConfig = (
      | i sum |
      i:: 1.

      [ i <= args size ] whileTrue: [
        | arg |
        arg:: args at: i.
        arg = '-c' ifTrue: [ clients::   (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-d' ifTrue: [ numDirs::   (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-t' ifTrue: [ turns::     (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-m' ifTrue: [ compute::   (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-p' ifTrue: [ post::      (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-l' ifTrue: [ leave::     (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-i' ifTrue: [ invite::    (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-be' ifTrue: [ befriend::  (args at: i + 1) asInteger. i:: i + 1 ].
        arg = '-parse' ifTrue: [ parseable:: true ].

        i:: i + 1 ].

      numDirs > clients ifTrue: [
        ('Invalid arguments! Cannot have more directories (' + numDirs + ') than clients ('+ clients +')') println.
        system exit: 1 ].

      clients < (numDirs * 2) ifTrue: [
        ('Invalid arguments! Need to have 2x as many dictionaries (' + numDirs + ') so that clients ('+ clients +') have at least 1 friend') println.
        system exit: 1 ].

      sum:: compute + post + leave + invite.
      sum <> 100 ifTrue: [
        'Invalid arguments! Sum of probabilities != 100.' print.
        ' It is: ' print. sum println.
        system exit: 1 ].
    )

    public print = (
      'Configuration ChatApp Benchmark' println.
      '\tclients:     ' print. clients println.
      '\tdirectories: ' print. numDirs println.
      '\tturns:       ' print. turns println.
      '\tcompute:     ' print. compute println.
      '\tpost:        ' print. post println.
      '\tleave:       ' print. leave println.
      '\tinvite:      ' print. invite println.
      '\tbefriend:    ' print. befriend println.
      '\tparseable:   ' print. parseable println.
    )
  )

  class ChatApp new: cfg = (
  | private clients = cfg clients.
    private factory = BehaviorFactory new: cfg compute
                          post: cfg post leave: cfg leave invite: cfg invite.
    private poker =
      (actors createActorFromValue: Poker)
        <-: clients: clients turns: cfg turns directories: cfg numDirs
           befriend: cfg befriend factory: factory.
  |
  )(
    public run: benchmark isLast: last = (
      poker <-: start: benchmark isLast: last
    )
  )

  class Result new: name parseable: aBool = (
  | private benchmark = name.
    private parseable = aBool.
    private samples = Vector new.
  |)(
    public record: micro = (
      samples append: micro
    )

    public asString = (
      notYetImplemented
    )
  )

  class OutputManager new: parseable = (
  | private parseable = parseable.
    private result = Result new: 'AsyncActorBenchmark' parseable: parseable.
  |)(
    public report: micro = (
      result record: micro
    )

    public summarize = (
      result println
    )
  )

  class Runner new: cfg = (
  | private configuration = cfg.
    private benchmark
    private output = OutputManager new: cfg parseable.

    private iterations

    private running ::= false.
    private summarize ::= false.
    private startTime ::= 0.
    private endTime ::= 0.

    private completionR
  |)(
    public start: iter = (
      | pp |
      pp:: actors createPromisePair.
      completionR:: pp resolver.

      benchmark:: ChatApp new: configuration.
      iterations:: iter.
      next.
      ^ pp promise
    )

    private next = (
      running ifTrue: [ ^ self ].

      summarize ifTrue: [
        (*'Runner.summarize' println.
        output summarize.*)
        summarize:: false ].

      iterations > 0
        ifTrue: [
          running:: true.

          startTime:: system ticks.

          ('Runner.run: ' + iterations) println.

          benchmark run: self isLast: iterations = 1.
          iterations:: iterations - 1.
          summarize:: iterations = 0 ]
        ifFalse: [
          completionR resolve: 0 ]
    )

    public complete = (
      endTime:: system ticks.
      running:: false.
      output report: endTime - startTime.
      ('Total: ' + (endTime - startTime) + 'us') println.
      next.
    )
  )

  public main: args = (
    | cfg runner simpleRand dice |
    (*simpleRand:: SimpleRand new: 42.
    dice:: DiceRoll new: simpleRand.

    0 to: 2000000 do: [:i |
      (' seed: ' + dice seed + ' bool: ' + (dice next: 50)) println ].

    system exit: 0.*)

    cfg:: Config new: args.
    cfg print.
    runner:: (actors createActorFromValue: Runner) <-: new: cfg.
    ^ (runner <-: start: 32)
  )

  private debug: aBlock = (
    aBlock value println.
  )
)
